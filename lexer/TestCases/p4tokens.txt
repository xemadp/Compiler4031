program		 <PROGRAM_KW, ->
MatrixOperations		 <IDENTIFIER, 1>
;		 <SEMICOLON, ->
integer		 <INTEGER_KW, ->
i		 <IDENTIFIER, 2>
,		 <COMMA, ->
j		 <IDENTIFIER, 3>
,		 <COMMA, ->
k		 <IDENTIFIER, 4>
;		 <SEMICOLON, ->
integer		 <INTEGER_KW, ->
n		 <IDENTIFIER, 5>
;		 <SEMICOLON, ->
real		 <REAL_KW, ->
result		 <IDENTIFIER, 6>
;		 <SEMICOLON, ->
function		 <FUNCTION_KW, ->
getmatrix1element		 <IDENTIFIER, 7>
(		 <LEFT_PA, ->
i		 <IDENTIFIER, 2>
:		 <COLON, ->
integer		 <INTEGER_KW, ->
,		 <COMMA, ->
j		 <IDENTIFIER, 3>
:		 <COLON, ->
integer		 <INTEGER_KW, ->
)		 <RIGHT_PA, ->
:		 <COLON, ->
real		 <REAL_KW, ->
begin		 <BEGIN_KW, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
1.0		 <REAL_NUM, 9>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
2.0		 <REAL_NUM, 11>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
3.0		 <REAL_NUM, 13>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
4.0		 <REAL_NUM, 14>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
5.0		 <REAL_NUM, 15>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
6.0		 <REAL_NUM, 16>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
7.0		 <REAL_NUM, 17>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
8.0		 <REAL_NUM, 18>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
9.0		 <REAL_NUM, 19>
;		 <SEMICOLON, ->
return		 <RETURN_KW, ->
0.0		 <REAL_NUM, 20>
;		 <SEMICOLON, ->
end		 <END_KW, ->
function		 <FUNCTION_KW, ->
getmatrix2element		 <IDENTIFIER, 21>
(		 <LEFT_PA, ->
i		 <IDENTIFIER, 2>
:		 <COLON, ->
integer		 <INTEGER_KW, ->
,		 <COMMA, ->
j		 <IDENTIFIER, 3>
:		 <COLON, ->
integer		 <INTEGER_KW, ->
)		 <RIGHT_PA, ->
:		 <COLON, ->
real		 <REAL_KW, ->
begin		 <BEGIN_KW, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
9.0		 <REAL_NUM, 19>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
8.0		 <REAL_NUM, 18>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
7.0		 <REAL_NUM, 17>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
6.0		 <REAL_NUM, 16>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
5.0		 <REAL_NUM, 15>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
4.0		 <REAL_NUM, 14>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
1		 <REAL_NUM, 8>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
3.0		 <REAL_NUM, 13>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
2		 <REAL_NUM, 10>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
2.0		 <REAL_NUM, 11>
;		 <SEMICOLON, ->
if		 <IF_KW, ->
i		 <IDENTIFIER, 2>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
and		 <AND_KW, ->
j		 <IDENTIFIER, 3>
=		 <EQ_OP, ->
3		 <REAL_NUM, 12>
then		 <THEN_KW, ->
return		 <RETURN_KW, ->
1.0		 <REAL_NUM, 9>
;		 <SEMICOLON, ->
return		 <RETURN_KW, ->
0.0		 <REAL_NUM, 20>
;		 <SEMICOLON, ->
end		 <END_KW, ->
function		 <FUNCTION_KW, ->
multiplymatrices		 <IDENTIFIER, 22>
(		 <LEFT_PA, ->
n		 <IDENTIFIER, 5>
:		 <COLON, ->
integer		 <INTEGER_KW, ->
)		 <RIGHT_PA, ->
:		 <COLON, ->
real		 <REAL_KW, ->
integer		 <INTEGER_KW, ->
i		 <IDENTIFIER, 2>
,		 <COMMA, ->
j		 <IDENTIFIER, 3>
,		 <COMMA, ->
k		 <IDENTIFIER, 4>
;		 <SEMICOLON, ->
real		 <REAL_KW, ->
sum		 <IDENTIFIER, 23>
;		 <SEMICOLON, ->
begin		 <BEGIN_KW, ->
sum		 <IDENTIFIER, 23>
:=		 <ASSIGN_OP, ->
0.0		 <REAL_NUM, 20>
;		 <SEMICOLON, ->
for		 <FOR_KW, ->
i		 <IDENTIFIER, 2>
:=		 <ASSIGN_OP, ->
1		 <REAL_NUM, 8>
to		 <TO_KW, ->
n		 <IDENTIFIER, 5>
do		 <DO_KW, ->
for		 <FOR_KW, ->
j		 <IDENTIFIER, 3>
:=		 <ASSIGN_OP, ->
1		 <REAL_NUM, 8>
to		 <TO_KW, ->
n		 <IDENTIFIER, 5>
do		 <DO_KW, ->
for		 <FOR_KW, ->
k		 <IDENTIFIER, 4>
:=		 <ASSIGN_OP, ->
1		 <REAL_NUM, 8>
to		 <TO_KW, ->
n		 <IDENTIFIER, 5>
do		 <DO_KW, ->
sum		 <IDENTIFIER, 23>
:=		 <ASSIGN_OP, ->
sum		 <IDENTIFIER, 23>
+		 <ADD_OP, ->
(		 <LEFT_PA, ->
getmatrix1element		 <IDENTIFIER, 7>
(		 <LEFT_PA, ->
i		 <IDENTIFIER, 2>
,		 <COMMA, ->
k		 <IDENTIFIER, 4>
)		 <RIGHT_PA, ->
*		 <MUL_OP, ->
getmatrix2element		 <IDENTIFIER, 21>
(		 <LEFT_PA, ->
k		 <IDENTIFIER, 4>
,		 <COMMA, ->
j		 <IDENTIFIER, 3>
)		 <RIGHT_PA, ->
)		 <RIGHT_PA, ->
;		 <SEMICOLON, ->
return		 <RETURN_KW, ->
sum		 <IDENTIFIER, 23>
;		 <SEMICOLON, ->
end		 <END_KW, ->
begin		 <BEGIN_KW, ->
n		 <IDENTIFIER, 5>
:=		 <ASSIGN_OP, ->
3		 <REAL_NUM, 12>
;		 <SEMICOLON, ->
result		 <IDENTIFIER, 6>
:=		 <ASSIGN_OP, ->
multiplymatrices		 <IDENTIFIER, 22>
(		 <LEFT_PA, ->
n		 <IDENTIFIER, 5>
)		 <RIGHT_PA, ->
;		 <SEMICOLON, ->
end		 <END_KW, ->
