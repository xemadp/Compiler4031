program <PROGRAM_KW, -> 
MatrixOperations <IDENTIFIER, 1> 
; <SEMICOLON, -> 
integer <INTEGER_KW, -> 
i <IDENTIFIER, 2> 
, <COMMA, -> 
j <IDENTIFIER, 3> 
, <COMMA, -> 
k <IDENTIFIER, 4> 
, <COMMA, -> 
n <IDENTIFIER, 5> 
real <REAL_KW, -> 
result <IDENTIFIER, 6> 
function <FUNCTION_KW, -> 
get_matrix1_element <IDENTIFIER, 7> 
( <RIGHT_PA, -> 
i <IDENTIFIER, 2> 
, <COMMA, -> 
j <IDENTIFIER, 3> 
) <LEFT_PA, -> 
: <COLON, -> 
real <REAL_KW, -> 
begin <BEGIN_KW, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
1 <INTEGER_NUMBER, 1> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
1.0 <REAL_NUMBER, 1> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
2 <INTEGER_NUMBER, 2> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
2.0 <REAL_NUMBER, 2> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
3 <INTEGER_NUMBER, 3> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
3.0 <REAL_NUMBER, 3> 
; <SEMICOLON, -> 
return <RETURN_KW, -> 
0.0 <REAL_NUMBER, 4> 
end <END_KW, -> 
function <FUNCTION_KW, -> 
get_matrix2_element <IDENTIFIER, 8> 
( <RIGHT_PA, -> 
i <IDENTIFIER, 2> 
, <COMMA, -> 
j <IDENTIFIER, 3> 
) <LEFT_PA, -> 
: <COLON, -> 
real <REAL_KW, -> 
begin <BEGIN_KW, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
1 <INTEGER_NUMBER, 1> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
2 <INTEGER_NUMBER, 2> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
9.0 <REAL_NUMBER, 5> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
1 <INTEGER_NUMBER, 1> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
3 <INTEGER_NUMBER, 3> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
8.0 <REAL_NUMBER, 6> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
1 <INTEGER_NUMBER, 1> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
4 <INTEGER_NUMBER, 4> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
7.0 <REAL_NUMBER, 7> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
2 <INTEGER_NUMBER, 2> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
5 <INTEGER_NUMBER, 5> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
6.0 <REAL_NUMBER, 8> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
2 <INTEGER_NUMBER, 2> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
6 <INTEGER_NUMBER, 6> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
5.0 <REAL_NUMBER, 9> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
2 <INTEGER_NUMBER, 2> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
7 <INTEGER_NUMBER, 7> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
4.0 <REAL_NUMBER, 10> 
; <SEMICOLON, -> 
if <IF_KW, -> 
i <IDENTIFIER, 2> 
= <EQ_OP, -> 
3 <INTEGER_NUMBER, 3> 
and <AND_KW, -> 
j <IDENTIFIER, 3> 
= <EQ_OP, -> 
8 <INTEGER_NUMBER, 8> 
then <THEN_KW, -> 
return <RETURN_KW, -> 
3.0 <REAL_NUMBER, 11> 
; <SEMICOLON, -> 
